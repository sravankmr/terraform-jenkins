In this project, I automated the provisioning and management of an AWS-based infrastructure using Terraform, Ansible, Jenkins, and AWS-native services. The primary goal was to streamline deployment, enhance security, and introduce self-healing capabilities. Using Terraform, I defined and deployed AWS resources such as VPC, subnets, security groups, EC2 instances, and RDS databases, ensuring infrastructure consistency across environments. IAM roles and policies were implemented following the principle of least privilege to enhance security. For configuration management, Ansible was leveraged to install necessary packages, configure web servers (Apache/Nginx), and manage database connections, while also handling SSL certificate deployment for secure communication.

To enable continuous deployment, I integrated Jenkins with GitHub, creating a CI/CD pipeline that triggered Terraform and Ansible automation upon new commits. Pre-deployment tests and policy checks were enforced to maintain infrastructure integrity. Additionally, CloudWatch was configured for real-time monitoring, with Lambda functions (using Python and Boto3) automating responses to critical events, such as restarting failed services or scaling resources dynamically. This implementation reduced manual provisioning time from one hour to ten minutes, improved security posture through automated compliance checks, and ensured high availability with self-healing infrastructure. The result was a robust, scalable, and secure AWS environment optimized for efficient cloud operations.